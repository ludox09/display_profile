# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Display_Profile
                                 A QGIS plugin
 Display remote sensing time serie profile
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-05-12
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Ludovic Arnaud
        email                : ludox09@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

#from qgis.utils import iface
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QObject,Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QGraphicsScene, QTableWidgetItem
from qgis.core import QgsProject
from qgis.gui import QgsMapCanvas,QgsMapTool,QgsMapToolEmitPoint
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
import numpy as np

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .display_profile_dockwidget import Display_ProfileDockWidget
import os.path
from math import floor


class Display_Profile:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Display_Profile_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Display Profile')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'Display_Profile')
        self.toolbar.setObjectName(u'Display_Profile')

        #print "** INITIALIZING Display_Profile"

        self.pluginIsActive = False
        self.dockwidget = None



    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Display_Profile', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/display_profile/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Profile'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING Display_Profile"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD Display_Profile"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Display Profile'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------


    def saveSettings(self):
        with open("/home/ludovic/.local/share/QGIS/QGIS3/profiles/default/python/plugins/display_profile/settings.txt","w") as f:
             f.write(str(self.dockwidget.comboBox_N0.currentIndex())+"\n")
             f.write(str(self.dockwidget.comboBox_N1.currentIndex())+"\n")
             f.write(str(self.dockwidget.comboBox_raster.currentIndex())+"\n")
             f.write(self.dockwidget.mQgsFileWidget.filePath())

    def Coordinates(self,data_provider,point):
        extent = data_provider.extent() 
        width = data_provider.xSize() if data_provider.capabilities() & data_provider.Size else 1000 
        height = data_provider.ySize() if data_provider.capabilities() & data_provider.Size else 1000 
        xres = extent.width() / width 
        yres = extent.height() / height
 
        if extent.xMinimum() <= point.x() <= extent.xMaximum() and \
            extent.yMinimum() <= point.y() <= extent.yMaximum():
            col = int(floor((point.x() - extent.xMinimum()) / xres))
            row = int(floor((extent.yMaximum() - point.y()) / yres))
        else:
            col = -1
            row = -1
       
        X = point.x()
        Y = point.y()

        return X,Y,col,row


    def get_bands(self,data_provider,point):
        nband = data_provider.bandCount()
        val = []
        for i in range(nband):
            v,res = data_provider.sample(point,i+1)
            val.append(v)
        val = np.array(val)
        return nband,val


    def clickedOnMap(self, point, button):

        # Getting appropritate layers
        self.layer = self.iface.activeLayer()
        raster_name = self.dockwidget.comboBox_raster.currentText()
        layer_raster  =  QgsProject.instance().mapLayersByName(raster_name)[0]

        print("rastername",raster_name)
        print("self.layer ",self.layer)
        print("self.layer raster",layer_raster)

        # Getting raster info
        data_provider = self.layer.dataProvider()
        data_provider_raster = layer_raster.dataProvider()

        # Manage canvas coordinate
        X1,Y1,col1,row1 = self.Coordinates(data_provider,point)
        X2,Y2,col2,row2 = self.Coordinates(data_provider_raster,point)
 
        #print("DEBUG1: [%d = %d,%d = %d]\n"%(X1,row1,Y1,col1))
        #print("DEBUG2: [%d = %d,%d = %d]\n"%(X2,row2,Y2,col2))

        # Getting pixel dat
        nband, profile = self.get_bands(data_provider,point)
        nband_raster, profile_raster = self.get_bands(data_provider_raster,point)
    
        # Specific management
        profile = profile/1000.0
        valid = np.greater(profile,0.0)
        tidx = np.arange(nband)

        print(profile)
        print(profile_raster)
        print(self.dockwidget.comboBox_raster.currentIndex())
  
        # Plot
        self.plots[0].set_xdata(tidx[valid])
        self.plots[0].set_ydata(profile[valid])
        plt.xlim([0,nband])
        plt.ylim([0,1])
        self.figure.canvas.draw()

        # Table
        self.dockwidget.table.setRowCount(nband_raster)
        self.dockwidget.table.setColumnCount(1)
        self.dockwidget.table.setHorizontalHeaderLabels([u'Value'])
        row_name = [data_provider_raster.generateBandName(i+1) for i in range(nband_raster)]
        print(row_name)
        for i in range (self.dockwidget.table.rowCount()):
            #insert the data in the table
            label = QTableWidgetItem()
            label.setText(str(profile_raster[i]))
            label.setTextAlignment(Qt.AlignCenter)
            self.dockwidget.table.setItem(i,0,label)

        self.dockwidget.table.setVerticalHeaderLabels(row_name)
   
    def initialization(self):
        # Get settings file parameter
        l0 = 0
        l1 = 1
        l2 = 2
        datefile = ""
        with open("/home/ludovic/.local/share/QGIS/QGIS3/profiles/default/python/plugins/display_profile/settings.txt","r") as f:
            try:
                l0 = int(f.readline())
                l1 = int(f.readline())
                l2 = int(f.readline())
                datefile = f.readline()
            except:
                pass

        # Declare parameter widgets
        self.layers = QgsProject.instance().layerTreeRoot().children()
        self.dockwidget.comboBox_N0.clear()
        self.dockwidget.comboBox_N1.clear()
        self.dockwidget.comboBox_raster.clear()

        self.dockwidget.comboBox_N0.addItems([layer.name() for layer in self.layers])
        self.dockwidget.comboBox_N1.addItems([layer.name() for layer in self.layers])
        self.dockwidget.comboBox_raster.addItems([layer.name() for layer in self.layers])

        # Initialize parameter widgets
        self.dockwidget.comboBox_N0.setCurrentIndex(l0)
        self.dockwidget.comboBox_N1.setCurrentIndex(l1)
        self.dockwidget.comboBox_raster.setCurrentIndex(l2)
        self.dockwidget.mQgsFileWidget.setFilePath(datefile)

        # Add signal handle to parameter widgets
        self.dockwidget.comboBox_N0.currentIndexChanged.connect(self.comboBox_change)
        self.dockwidget.comboBox_N1.currentIndexChanged.connect(self.comboBox_change)
        self.dockwidget.comboBox_raster.currentIndexChanged.connect(self.comboBox_change)
        self.dockwidget.mQgsFileWidget.fileChanged.connect(self.saveSettings)

        # Init plot area
        self.figure = plt.figure(figsize = (6,4))
        self.plot_color = ['g']
        self.plots = []
        for i,c in enumerate(self.plot_color):
            p, = plt.plot([0,0],[0,0], color = c) # NOTE: becarefull with the syntax. there is a comma.
            self.plots.append(p)

        #plt.ylim([0,1])  
        plt.xlabel("DoY")  
        plt.ylabel("NDVI")  

        self.scene = QGraphicsScene(self.dockwidget) 
        window = FigureCanvas(self.figure)
        self.scene.addWidget(window)
        self.dockwidget.graphicsView.setScene(self.scene)
        self.dockwidget.show()    

  
    def comboBox_change(self):
        # Update comboBox and save value
        combo = self.dockwidget.sender()
        selectedLayerIndex = combo.currentIndex()
        selectedLayer = self.layers[selectedLayerIndex].name()
        self.saveSettings()

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING Display_Profile"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = Display_ProfileDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

            self.initialization()
            self.canvas = self.iface.mapCanvas()
            self.emitPoint = QgsMapToolEmitPoint(self.canvas)
            self.canvas.setMapTool(self.emitPoint)
            self.emitPoint.canvasClicked.connect(self.clickedOnMap)

            
            print("DONE555")


